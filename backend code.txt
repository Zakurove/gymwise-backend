================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-05T00:31:12.546Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
accounts/
  migrations/
    0001_initial.py
    0002_alter_user_first_name_alter_user_last_name.py
    0003_remove_institution_domain_and_more.py
  templates/
    emails/
      account_activated_email_template.html
      activation_email_template.html
      password_reset_email_template.html
  admin.py
  apps.py
  models.py
  permissions.py
  serializers.py
  tests.py
  urls.py
  utils.py
  views.py
ai/
  migrations/
    0001_initial.py
    0002_campaign_campaignperformance.py
    0003_member_extended_data_member_join_date_and_more.py
  ml/
    customer_segmentation.py
    data_preprocessing.py
    feature_engineering.py
    kaggle.py
    model_evaluation.py
    model_training.py
    visualization.py
  admin.py
  apps.py
  data_pipeline.py
  insights.py
  models.py
  tests.py
  urls.py
  views.py
bookings/
  migrations/
    0001_initial.py
  templates/
    confirmation_email_template.html
    contact_email_template.html
  admin.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
gymwise_api/
  asgi.py
  middleware.py
  settings.py
  urls.py
  wsgi.py
manage.py
requirements.txt

================================================================
Repository Files
================================================================

================
File: accounts\admin.py
================
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.utils.translation import gettext_lazy as _
from .models import User, Institution, Member, AIModel

class UserAdmin(BaseUserAdmin):
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        (_('Personal info'), {'fields': ('first_name', 'last_name')}),
        (_('Institutional info'), {'fields': ('institution', 'role')}),
        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'is_email_verified', 'groups', 'user_permissions')}),
        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email', 'password1', 'password2', 'first_name', 'last_name', 'institution', 'role', 'is_active', 'is_staff'),
        }),
    )
    list_display = ('email', 'first_name', 'last_name', 'institution', 'role', 'is_active', 'is_staff', 'is_email_verified')
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'institution', 'role', 'is_email_verified')
    search_fields = ('email', 'first_name', 'last_name')
    ordering = ('email',)
    filter_horizontal = ('groups', 'user_permissions',)

class InstitutionAdmin(admin.ModelAdmin):
    list_display = ('name', 'is_active', 'created_at')
    list_filter = ('is_active',)
    search_fields = ('name',)

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if request.user.is_superuser:
            return qs
        return qs.filter(id=request.user.institution.id)

    def has_change_permission(self, request, obj=None):
        if not obj:
            return True
        return request.user.is_superuser or request.user.institution == obj

    def has_delete_permission(self, request, obj=None):
        if not obj:
            return True
        return request.user.is_superuser or request.user.institution == obj

class MemberAdmin(admin.ModelAdmin):
    list_display = ('user', 'institution')
    list_filter = ('institution',)
    search_fields = ('user__email', 'user__first_name', 'user__last_name')

class AIModelAdmin(admin.ModelAdmin):
    list_display = ('name', 'institution', 'created_at', 'updated_at')
    list_filter = ('institution',)
    search_fields = ('name', 'institution__name')

admin.site.register(User, UserAdmin)
admin.site.register(Institution, InstitutionAdmin)
admin.site.register(Member, MemberAdmin)
admin.site.register(AIModel, AIModelAdmin)

================
File: accounts\apps.py
================
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "accounts"

================
File: accounts\migrations\0001_initial.py
================
# Generated by Django 5.0.7 on 2024-07-29 12:20

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Institution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("subdomain", models.CharField(max_length=100, unique=True)),
                (
                    "domain",
                    models.CharField(
                        blank=True, max_length=253, null=True, unique=True
                    ),
                ),
                ("allowed_domains", models.TextField(default="[]")),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="AIModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("file_path", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("superadmin", "Superadmin"),
                            ("admin", "Admin"),
                            ("user", "User"),
                        ],
                        default="user",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                ("is_email_verified", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="account_members",
                        to="accounts.institution",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="account_member",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]

================
File: accounts\migrations\0002_alter_user_first_name_alter_user_last_name.py
================
# Generated by Django 5.0.7 on 2024-07-29 12:35

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0001_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="user",
            name="first_name",
            field=models.CharField(max_length=30),
        ),
        migrations.AlterField(
            model_name="user",
            name="last_name",
            field=models.CharField(max_length=30),
        ),
    ]

================
File: accounts\migrations\0003_remove_institution_domain_and_more.py
================
# Generated by Django 5.0.7 on 2024-08-02 11:22

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0002_alter_user_first_name_alter_user_last_name"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="institution",
            name="domain",
        ),
        migrations.RemoveField(
            model_name="institution",
            name="subdomain",
        ),
    ]

================
File: accounts\models.py
================
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.db import models
from django.db.models.signals import post_delete, pre_save
from django.dispatch import receiver
from django.contrib.admin.models import LogEntry
import json

class Institution(models.Model):
    name = models.CharField(max_length=100, unique=True)
    allowed_domains = models.TextField(default='[]')
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    def get_allowed_domains(self):
        return json.loads(self.allowed_domains)

    def set_allowed_domains(self, domains):
        self.allowed_domains = json.dumps(list(domains))

    def is_domain_allowed(self, domain):
        return domain in self.get_allowed_domains()

class TenantAwareModel(models.Model):
    institution = models.ForeignKey(Institution, on_delete=models.CASCADE, related_name='%(app_label)s_%(class)s_related')

    class Meta:
        abstract = True

class UserManager(BaseUserManager):
    def create_user(self, email, first_name, last_name, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, first_name=first_name, last_name=last_name, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, first_name, last_name, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)
        extra_fields.setdefault('role', 'superadmin')
        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')
        return self.create_user(email, first_name, last_name, password, **extra_fields)

class User(AbstractUser):
    ROLE_CHOICES = (
        ('superadmin', 'Superadmin'),
        ('admin', 'Admin'),
        ('user', 'User'),
    )

    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.EmailField(unique=True)
    institution = models.ForeignKey(Institution, on_delete=models.SET_NULL, null=True, blank=True, related_name='users')
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='user')
    is_active = models.BooleanField(default=False)
    is_email_verified = models.BooleanField(default=False)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    objects = UserManager()

    def save(self, *args, **kwargs):
        if not self.username:
            self.username = self.email
        if not self.institution:
            domain = self.email.split('@')[1]
            self.institution = next((inst for inst in Institution.objects.all() if inst.is_domain_allowed(domain)), None)
        super(User, self).save(*args, **kwargs)

    def __str__(self):
        return self.email

class Member(TenantAwareModel):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='account_member')
    institution = models.ForeignKey(Institution, on_delete=models.CASCADE, related_name='account_members')
    # Add other member-specific fields here

class AIModel(TenantAwareModel):
    name = models.CharField(max_length=100)
    file_path = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} - {self.institution.name}"

@receiver(post_delete, sender=User)
def delete_log_entries(sender, instance, **kwargs):
    LogEntry.objects.filter(object_id=instance.id).delete()

@receiver(pre_save, sender=User)
def update_log_entries(sender, instance, **kwargs):
    if instance.pk:
        previous_instance = User.objects.get(pk=instance.pk)
        if previous_instance.is_staff != instance.is_staff:
            LogEntry.objects.filter(object_id=instance.id).delete()

================
File: accounts\permissions.py
================
from rest_framework import permissions

class IsAdminUser(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user and (request.user.role == 'admin' or request.user.role == 'superadmin')

class IsSuperAdminOrAdmin(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user and request.user.role in ['superadmin', 'admin']

class IsSuperAdmin(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user and request.user.role == 'superadmin'

================
File: accounts\serializers.py
================
from rest_framework import serializers
from django.core.mail import send_mail
from django.contrib.sites.shortcuts import get_current_site
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes
from django.contrib.auth.tokens import default_token_generator
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError as DjangoValidationError
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from .models import User, Institution
import json

class RegisterSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'email', 'password')
        extra_kwargs = {
            'password': {'write_only': True}
        }

    def validate_email(self, value):
        if User.objects.filter(email=value).exists():
            raise serializers.ValidationError("A user with this email already exists.")
        
        domain = value.split('@')[1]
        institutions = Institution.objects.all()
        
        allowed_institution = next((inst for inst in institutions if inst.is_domain_allowed(domain)), None)
        
        if not allowed_institution:
            raise serializers.ValidationError("This email domain is not allowed.")
        
        return value

    def validate_password(self, value):
        try:
            validate_password(value)
        except DjangoValidationError as e:
            raise serializers.ValidationError(str(e))
        return value

    def create(self, validated_data):
        user = User.objects.create_user(
            first_name=validated_data['first_name'],
            last_name=validated_data['last_name'],
            email=validated_data['email'],
            password=validated_data['password']
        )
        user.is_active = False
        user.is_email_verified = False
        
        domain = user.email.split('@')[1]
        institution = Institution.objects.filter(allowed_domains__contains=domain).first()
        if institution:
            user.institution = institution
        
        user.save()

        self.send_activation_email(user)

        return user
    
    def send_activation_email(self, user):
        current_site = get_current_site(self.context['request'])
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        token = default_token_generator.make_token(user)
        activation_link = f"http://localhost:3000/activate/{uid}/{token}/"

        context = {
            'user': user,
            'activation_link': activation_link,
        }
        html_message = render_to_string('emails/activation_email_template.html', context)
        plain_message = strip_tags(html_message)

        send_mail(
            'Activate your GymWise account',
            plain_message,
            'contact@gymwise.tech',
            [user.email],
            html_message=html_message,
            fail_silently=False,
        )

class ActivateUserSerializer(serializers.Serializer):
    uid = serializers.CharField()
    token = serializers.CharField()

class ForgotPasswordSerializer(serializers.Serializer):
    email = serializers.EmailField()

class ResetPasswordSerializer(serializers.Serializer):
    password = serializers.CharField(write_only=True, required=True)
    confirm_password = serializers.CharField(write_only=True, required=True)

    def validate_password(self, value):
        try:
            validate_password(value)
        except DjangoValidationError as e:
            raise serializers.ValidationError(str(e))
        return value

    def validate(self, attrs):
        if attrs['password'] != attrs['confirm_password']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})
        return attrs

class ManageRolesSerializer(serializers.Serializer):
    email = serializers.EmailField()
    role = serializers.ChoiceField(choices=User.ROLE_CHOICES)

class InstitutionSerializer(serializers.ModelSerializer):
    allowed_domains = serializers.ListField(child=serializers.CharField(), write_only=True)

    class Meta:
        model = Institution
        fields = ['id', 'name', 'allowed_domains', 'is_active']

    def to_representation(self, instance):
        representation = super().to_representation(instance)
        representation['allowed_domains'] = json.loads(instance.allowed_domains)
        return representation

    def to_internal_value(self, data):
        if 'allowed_domains' in data:
            data['allowed_domains'] = json.dumps(data['allowed_domains'])
        return super().to_internal_value(data)

class UserSerializer(serializers.ModelSerializer):
    institution_name = serializers.CharField(source='institution.name', read_only=True)

    class Meta:
        model = User
        fields = ['id', 'email', 'first_name', 'last_name', 'role', 'institution', 'institution_name', 'is_active', 'is_email_verified']

class InactiveUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'first_name', 'last_name', 'institution']

================
File: accounts\templates\emails\account_activated_email_template.html
================
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #3182CE; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; background-color: #f8f8f8; }
        .button { display: inline-block; padding: 10px 20px; background-color: #3182CE; color: white; text-decoration: none; border-radius: 5px; }
        .footer { text-align: center; margin-top: 20px; font-size: 0.8em; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Your GymWise Account is Now Active</h1>
        </div>
        <div class="content">
            <h2>Hello {{ user.first_name }},</h2>
            <p>Great news! Your GymWise account has been activated by an administrator.</p>
            <p>You can now log in and start using all the features of GymWise to enhance your gym management experience.</p>
            <p style="text-align: center;">
                <a href="{{ login_url }}" class="button">Log In to GymWise</a>
            </p>
            <p>If you have any questions or need assistance, please don't hesitate to contact our support team.</p>
            <p>Welcome aboard!</p>
            <p>Best regards,<br>The GymWise Team</p>
        </div>
        <div class="footer">
            <p>© {% now "Y" %} GymWise. All rights reserved.</p>
        </div>
    </div>
</body>
</html>

================
File: accounts\templates\emails\activation_email_template.html
================
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #3182CE; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; background-color: #f8f8f8; }
        .button { display: inline-block; padding: 10px 20px; background-color: #3182CE; color: white; text-decoration: none; border-radius: 5px; }
        .footer { text-align: center; margin-top: 20px; font-size: 0.8em; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Welcome to GymWise</h1>
        </div>
        <div class="content">
            <h2>Hello {{ user.first_name }},</h2>
            <p>Thank you for registering with GymWise. We're excited to have you on board!</p>
            <p>To confirm your email, please click the button below:</p>
            <p style="text-align: center;">
                <a href="{{ activation_link }}" class="button">Confirm Your Email</a>
            </p>
            <p>If the button above doesn't work, you can also copy and paste the following link into your browser:</p>
            <p>{{ activation_link }}</p>
            <p>This link will expire in 24 hours for security reasons.</p>
            <p>If you didn't register for a GymWise account, please ignore this email.</p>
        </div>
        <div class="footer">
            <p>© 2023 GymWise. All rights reserved.</p>
        </div>
    </div>
</body>
</html>

================
File: accounts\templates\emails\password_reset_email_template.html
================
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #3182CE; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; background-color: #f8f8f8; }
        .button { display: inline-block; padding: 10px 20px; background-color: #3182CE; color: white; text-decoration: none; border-radius: 5px; }
        .footer { text-align: center; margin-top: 20px; font-size: 0.8em; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>GymWise Password Reset</h1>
        </div>
        <div class="content">
            <h2>Hello,</h2>
            <p>We received a request to reset the password for your GymWise account.</p>
            <p>To reset your password, please click the button below:</p>
            <p style="text-align: center;">
                <a href="{{ reset_link }}" class="button">Reset Your Password</a>
            </p>
            <p>If the button above doesn't work, you can also copy and paste the following link into your browser:</p>
            <p>{{ reset_link }}</p>
            <p>This link will expire in 1 hour for security reasons.</p>
            <p>If you didn't request a password reset, please ignore this email or contact our support team if you have concerns.</p>
        </div>
        <div class="footer">
            <p>© 2023 GymWise. All rights reserved.</p>
        </div>
    </div>
</body>
</html>

================
File: accounts\tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: accounts\urls.py
================
from django.urls import path
from rest_framework_simplejwt.views import TokenRefreshView
from .views import (
    RegisterView,
    ActivateUserView,
    ForgotPasswordView,
    ResetPasswordView,
    ManageRolesView,
    InstitutionView,
    CustomTokenObtainPairView,
    UserView,
    ActivateUserByAdminView,
    CurrentUserView,
    InstitutionUsersView,
)

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('activate/<str:uidb64>/<str:token>/', ActivateUserView.as_view(), name='activate'),
    path('token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('forgot-password/', ForgotPasswordView.as_view(), name='forgot_password'),
    path('reset-password/<str:uid>/<str:token>/', ResetPasswordView.as_view(), name='reset_password'),
    path('manage-roles/', ManageRolesView.as_view(), name='manage_roles'),
    path('user/', CurrentUserView.as_view(), name='current_user'),
    path('institution-users/', InstitutionUsersView.as_view(), name='institution_users'),
    path('activate-user/<int:user_id>/', ActivateUserByAdminView.as_view(), name='activate_user'),
    # path('tenant/<str:subdomain>/', get_tenant_by_subdomain, name='get_tenant_by_subdomain'),
]

================
File: accounts\utils.py
================
from django.conf import settings

def get_tenant_domain(request):
    host = request.get_host().lower()
    split_host = host.split('.')
    
    main_domain = settings.MAIN_DOMAIN
    domain = None
    subdomain = None

    if main_domain in host:
        if host == main_domain:
            return None, None
        subdomain = host.replace(f".{main_domain}", "")
    else:
        domain = host

    return domain, subdomain

================
File: accounts\views.py
================
from rest_framework import generics, status, permissions
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.views import TokenObtainPairView
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.core.validators import validate_email
from django.utils.http import urlsafe_base64_decode
from django.utils.encoding import force_str
from django.contrib.auth.tokens import default_token_generator
from django.shortcuts import get_object_or_404
from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes
from django.utils.html import strip_tags
from .models import Institution
from .serializers import (
    RegisterSerializer, 
    ActivateUserSerializer, 
    ForgotPasswordSerializer, 
    ResetPasswordSerializer, 
    ManageRolesSerializer, 
    InstitutionSerializer,
    UserSerializer
)
from .permissions import IsAdminUser, IsSuperAdminOrAdmin, IsSuperAdmin
import logging

logger = logging.getLogger(__name__)

User = get_user_model()

class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = RegisterSerializer
    permission_classes = [AllowAny]  # This is crucial

    def create(self, request, *args, **kwargs):
        logger.info(f"Received registration request: {request.data}")
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            try:
                self.perform_create(serializer)
                headers = self.get_success_headers(serializer.data)
                logger.info(f"User registered successfully: {serializer.data}")
                return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)
            except Exception as e:
                logger.error(f"Error during user registration: {str(e)}")
                return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
        logger.error(f"Invalid registration data: {serializer.errors}")
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def perform_create(self, serializer):
        user = serializer.save()
        email_domain = user.email.split('@')[1]
        institution = Institution.objects.filter(allowed_domains__contains=email_domain).first()
        if institution:
            user.institution = institution
            user.save()

class ActivateUserView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, uidb64, token):
        try:
            uid = force_str(urlsafe_base64_decode(uidb64))
            user = User.objects.get(pk=uid)
        except (TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None

        if user is not None and default_token_generator.check_token(user, token):
            user.is_email_verified = True
            user.save()
            return Response({"detail": "Email verified successfully."}, status=status.HTTP_200_OK)
        else:
            return Response({"detail": "Invalid activation link."}, status=status.HTTP_400_BAD_REQUEST)

class CustomTokenObtainPairView(TokenObtainPairView):
    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)
        if response.status_code == 200:
            user = User.objects.get(email=request.data['email'])
            user_data = UserSerializer(user).data
            response.data['user'] = user_data
        return response

class ForgotPasswordView(APIView):
    permission_classes = [permissions.AllowAny]

    def post(self, request):
        serializer = ForgotPasswordSerializer(data=request.data)
        if serializer.is_valid():
            try:
                user = User.objects.get(email=serializer.validated_data['email'])
                token = default_token_generator.make_token(user)
                uid = urlsafe_base64_encode(force_bytes(user.pk))
                reset_link = f"http://localhost:3000/reset-password/{uid}/{token}/"

                context = {
                    'reset_link': reset_link,
                }
                html_message = render_to_string('emails/password_reset_email_template.html', context)
                plain_message = strip_tags(html_message)

                send_mail(
                    'Reset your GymWise password',
                    plain_message,
                    'contact@gymwise.tech',
                    [user.email],
                    html_message=html_message,
                    fail_silently=False,
                )
                return Response({'message': 'Password reset link sent'}, status=status.HTTP_200_OK)
            except User.DoesNotExist:
                return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
class ResetPasswordView(APIView):
    permission_classes = [AllowAny]

    def post(self, request, uid, token):
        try:
            uid = force_str(urlsafe_base64_decode(uid))
            user = User.objects.get(pk=uid)
        except (TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None

        if user is not None and default_token_generator.check_token(user, token):
            serializer = ResetPasswordSerializer(data=request.data)
            if serializer.is_valid():
                user.set_password(serializer.validated_data['password'])
                user.save()
                return Response({'message': 'Password reset successfully'}, status=status.HTTP_200_OK)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        else:
            return Response({'error': 'Reset link is invalid!'}, status=status.HTTP_400_BAD_REQUEST)

class InstitutionUsersView(generics.ListAPIView):
    serializer_class = UserSerializer
    permission_classes = [IsAuthenticated, IsAdminUser]

    def get_queryset(self):
        logger.info(f"User {self.request.user.id} fetching institution users")
        if self.request.user.role == 'superadmin':
            return User.objects.all()
        elif self.request.user.role == 'admin':
            return User.objects.filter(institution=self.request.user.institution)
        return User.objects.none()

class ManageRolesView(generics.GenericAPIView):
    permission_classes = [IsAuthenticated, IsAdminUser]
    queryset = User.objects.all()
    serializer_class = UserSerializer

    def post(self, request, *args, **kwargs):
        user_id = request.data.get('user_id')
        new_role = request.data.get('role')

        if not user_id or not new_role:
            return Response({'error': 'User ID and new role are required'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            user_to_update = User.objects.get(id=user_id)
            
            if request.user.role != 'superadmin' and (user_to_update.role == 'superadmin' or new_role == 'superadmin'):
                return Response({'error': 'You do not have permission to change superadmin roles'}, status=status.HTTP_403_FORBIDDEN)

            if request.user.role == 'admin' and user_to_update.institution != request.user.institution:
                return Response({'error': 'You can only change roles for users in your institution'}, status=status.HTTP_403_FORBIDDEN)

            user_to_update.role = new_role
            user_to_update.save()

            logger.info(f"User {user_to_update.id} role updated to {new_role} by admin {request.user.id}")
            return Response({'message': f"User role updated to {new_role}"}, status=status.HTTP_200_OK)

        except User.DoesNotExist:
            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            logger.error(f"Error in ManageRolesView: {str(e)}")
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class InstitutionView(generics.ListCreateAPIView):
    queryset = Institution.objects.all()
    serializer_class = InstitutionSerializer
    permission_classes = [IsSuperAdmin]

class UserView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        serializer = UserSerializer(request.user)
        return Response(serializer.data)

class PendingUsersView(generics.ListAPIView):
    serializer_class = UserSerializer
    permission_classes = [IsAdminUser]

    def get_queryset(self):
        logger.info(f"User {self.request.user.id} attempting to fetch pending users")
        if self.request.user.role == 'superadmin':
            logger.info("Superadmin fetching all pending users")
            return User.objects.filter(is_active=False, is_email_verified=True)
        elif self.request.user.role == 'admin':
            logger.info(f"Admin user fetching pending users for institution {self.request.user.institution.id}")
            return User.objects.filter(is_active=False, is_email_verified=True, institution=self.request.user.institution)
        logger.warning(f"User {self.request.user.id} does not have permission to view pending users")
        return User.objects.none()

class ActivateUserByAdminView(generics.UpdateAPIView):
    permission_classes = [IsAuthenticated, IsAdminUser]
    queryset = User.objects.all()
    lookup_url_kwarg = 'user_id'

    def update(self, request, *args, **kwargs):
        try:
            user = self.get_object()
            if request.user.role == 'superadmin' or (request.user.role == 'admin' and request.user.institution == user.institution):
                user.is_active = True
                user.save()
                logger.info(f"User {user.id} activated successfully by admin {request.user.id}")
                return Response({'message': 'User activated successfully'}, status=status.HTTP_200_OK)
            else:
                logger.warning(f"User {request.user.id} attempted to activate user {user.id} without permission")
                return Response({'error': 'You do not have permission to activate this user'}, status=status.HTTP_403_FORBIDDEN)
        except Exception as e:
            logger.error(f"Error in ActivateUserByAdminView: {str(e)}")
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)

class CurrentUserView(generics.RetrieveAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = UserSerializer

    def get_object(self):
        return self.request.user

================
File: ai\admin.py
================
from django.contrib import admin

# Register your models here.

================
File: ai\apps.py
================
from django.apps import AppConfig


class AiConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "ai"

================
File: ai\data_pipeline.py
================
import pandas as pd
from django.conf import settings
from .models import Member, MemberActivity
import logging

logger = logging.getLogger(__name__)

def load_data_for_institution(institution_id):
    try:
        members = Member.objects.filter(institution_id=institution_id).values()
        activities = MemberActivity.objects.filter(member__institution_id=institution_id).values()
        
        df_members = pd.DataFrame.from_records(members)
        df_activities = pd.DataFrame.from_records(activities)
        
        # Merge member and activity data
        df = pd.merge(df_members, df_activities, left_on='id', right_on='member_id', how='left')
        
        return df
    except Exception as e:
        logger.error(f"Error loading data for institution {institution_id}: {str(e)}")
        return None

def preprocess_data(df):
    try:
        # Handle missing values
        df = df.fillna(0)
        
        # Convert categorical variables to numeric
        df['gender'] = df['gender'].map({'male': 0, 'female': 1})
        df['time_of_day'] = df['time_of_day'].map({'morning': 0, 'afternoon': 1, 'evening': 2})
        
        # Create new features
        df['days_since_last_visit'] = (pd.Timestamp.now() - pd.to_datetime(df['date'])).dt.days
        df['visit_frequency'] = df.groupby('id')['date'].transform('count')
        
        # Add seasonal features
        df['month'] = pd.to_datetime(df['date']).dt.month
        df['is_ramadan'] = df['month'].isin([9, 10])  # Assuming Ramadan is typically in the 9th and 10th months
        df['is_summer'] = df['month'].isin([6, 7, 8])
        
        # Select relevant features
        features = ['age', 'gender', 'membership_duration', 'visit_frequency', 'days_since_last_visit', 
                    'churn_probability', 'is_ramadan', 'is_summer']
        
        return df[features]
    except Exception as e:
        logger.error(f"Error preprocessing data: {str(e)}")
        return None

def get_preprocessed_data_for_institution(institution_id):
    raw_data = load_data_for_institution(institution_id)
    if raw_data is not None:
        preprocessed_data = preprocess_data(raw_data)
        return preprocessed_data
    return None

================
File: ai\insights.py
================
from datetime import timedelta
from django.utils import timezone
from hijri_converter import Gregorian, Hijri
from django.db.models import Count

def generate_insights(member, historical_data):
    insights = []
    now = timezone.now()
    
    # Churn Risk Insights
    if member.churn_risk == 'high':
        insights.append({
            'type': 'high_risk',
            'message': f"High risk of churn detected for {member.name}."
        })
    elif member.churn_risk == 'medium':
        insights.append({
            'type': 'medium_risk',
            'message': "Moderate churn risk detected."
        })

    # Visit Frequency Insights
    if member.visit_frequency < 2:
        insights.append({
            'type': 'low_engagement',
            'message': "Low visit frequency detected."
        })
    elif member.visit_frequency > 10:
        insights.append({
            'type': 'high_engagement',
            'message': "Highly engaged member identified."
        })

    # Membership Duration Insights
    if member.membership_duration > 12 and member.churn_risk != 'low':
        insights.append({
            'type': 'at_risk_veteran',
            'message': "Long-time member showing signs of disengagement."
        })

    # Recent Activity Trend
    recent_visits = historical_data.filter(date__gte=now - timedelta(days=30)).count()
    avg_monthly_visits = member.visit_frequency * 4  # Assuming visit_frequency is per week
    if recent_visits < avg_monthly_visits * 0.7:
        insights.append({
            'type': 'decreasing_activity',
            'message': "Recent activity has decreased compared to usual patterns."
        })

    # Seasonal Trend (Saudi Arabia specific)
    current_hijri = Hijri.from_gregorian(now.year, now.month, now.day)
    
    # Ramadan insights
    ramadan_start = Hijri(current_hijri.year, 9, 1).to_gregorian()
    ramadan_end = Hijri(current_hijri.year, 10, 1).to_gregorian()
    if ramadan_start <= now.date() <= ramadan_end:
        ramadan_visits = historical_data.filter(date__range=[ramadan_start, ramadan_end]).count()
        if ramadan_visits < member.visit_frequency * 2:  # Assuming at least 2 weeks of Ramadan
            insights.append({
                'type': 'ramadan_decrease',
                'message': "Member's attendance during Ramadan is lower than usual."
            })
    elif (ramadan_start - now.date()).days <= 30:
        insights.append({
            'type': 'pre_ramadan',
            'message': "Ramadan is approaching. Attendance patterns may change."
        })

    # Eid insights
    eid_al_fitr = Hijri(current_hijri.year, 10, 1).to_gregorian()
    eid_al_adha = Hijri(current_hijri.year, 12, 10).to_gregorian()
    if (eid_al_fitr - now.date()).days <= 7 or (eid_al_adha - now.date()).days <= 7:
        insights.append({
            'type': 'eid_approaching',
            'message': "Eid is approaching. Expect potential changes in attendance patterns."
        })

    # Summer insights
    if 5 <= now.month <= 8:  # May to August
        summer_visits = historical_data.filter(date__month__in=[5, 6, 7, 8]).count()
        if summer_visits < member.visit_frequency * 8:  # Assuming at least 8 weeks of summer
            insights.append({
                'type': 'summer_decrease',
                'message': "Member's summer attendance is lower than usual."
            })

    # Class Preference
    favorite_class = historical_data.values('class_name').annotate(count=Count('id')).order_by('-count').first()
    if favorite_class:
        insights.append({
            'type': 'class_preference',
            'message': f"Member shows a strong preference for {favorite_class['class_name']} classes."
        })

    # Time Preference
    preferred_time = historical_data.values('time_of_day').annotate(count=Count('id')).order_by('-count').first()
    if preferred_time:
        insights.append({
            'type': 'time_preference',
            'message': f"Member often visits during {preferred_time['time_of_day']} hours."
        })

    return insights

================
File: ai\migrations\0001_initial.py
================
# Generated by Django 5.0.7 on 2024-07-29 12:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="FeatureImportance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("feature_name", models.CharField(max_length=255)),
                ("importance_score", models.FloatField()),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InstitutionModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_path", models.CharField(max_length=255)),
                ("last_trained", models.DateTimeField(auto_now=True)),
                ("performance_metrics", models.JSONField(default=dict)),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "churn_risk",
                    models.CharField(
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                        ],
                        max_length=10,
                    ),
                ),
                ("churn_probability", models.FloatField()),
                ("last_prediction_date", models.DateTimeField(auto_now=True)),
                ("gender", models.CharField(blank=True, max_length=10, null=True)),
                ("age", models.IntegerField(blank=True, null=True)),
                ("membership_duration", models.IntegerField(blank=True, null=True)),
                ("visit_frequency", models.FloatField(blank=True, null=True)),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_members",
                        to="accounts.institution",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_member",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ActionableInsight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=50)),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="insights",
                        to="ai.member",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MemberActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("class_name", models.CharField(max_length=255)),
                (
                    "time_of_day",
                    models.CharField(
                        choices=[
                            ("morning", "Morning"),
                            ("afternoon", "Afternoon"),
                            ("evening", "Evening"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="ai.member",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MemberSegment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ModelMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("accuracy", models.FloatField()),
                ("precision", models.FloatField()),
                ("recall", models.FloatField()),
                ("f1_score", models.FloatField()),
                ("auc_roc", models.FloatField()),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MemberSegmentAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assignment_date", models.DateTimeField(auto_now_add=True)),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="ai.member"
                    ),
                ),
                (
                    "segment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai.membersegment",
                    ),
                ),
            ],
            options={
                "unique_together": {("member", "segment")},
            },
        ),
    ]

================
File: ai\migrations\0002_campaign_campaignperformance.py
================
# Generated by Django 5.0.7 on 2024-07-30 11:37

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0002_alter_user_first_name_alter_user_last_name"),
        ("ai", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Campaign",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("target_segment", models.CharField(max_length=50)),
                ("campaign_type", models.CharField(max_length=50)),
                ("message", models.TextField()),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("ai_optimization", models.BooleanField(default=False)),
                ("status", models.CharField(default="Active", max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CampaignPerformance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("total_sent", models.IntegerField()),
                ("open_rate", models.FloatField()),
                ("click_through_rate", models.FloatField()),
                ("conversion_rate", models.FloatField()),
                (
                    "campaign",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performances",
                        to="ai.campaign",
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]

================
File: ai\migrations\0003_member_extended_data_member_join_date_and_more.py
================
# Generated by Django 5.0.7 on 2024-08-04 20:01

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0003_remove_institution_domain_and_more"),
        ("ai", "0002_campaign_campaignperformance"),
    ]

    operations = [
        migrations.AddField(
            model_name="member",
            name="extended_data",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name="member",
            name="join_date",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="MappingTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("mapping", models.JSONField()),
                ("is_default", models.BooleanField(default=False)),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        to="accounts.institution",
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "institution")},
            },
        ),
    ]

================
File: ai\ml\customer_segmentation.py
================
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans

def perform_clustering(X_train_scaled, n_clusters=3):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    return kmeans.fit_predict(X_train_scaled)

def analyze_segments(df, clusters):
    df = df.copy()  # Create a copy to avoid SettingWithCopyWarning
    df = df.iloc[:len(clusters)]  # Ensure df has the same length as clusters
    df['Cluster'] = clusters
    segment_profile = df.groupby('Cluster').mean()
    churn_by_segment = df.groupby('Cluster')['Churn'].mean()
    return segment_profile, churn_by_segment

================
File: ai\ml\data_preprocessing.py
================
import pandas as pd
import numpy as np
from django.conf import settings
import os

def load_and_preprocess_data(file_name):
    file_path = os.path.join(settings.BASE_DIR, 'data', file_name)
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The file {file_name} does not exist in the data directory.")
    
    df = pd.read_csv(file_path)
    return preprocess_data(df)

def preprocess_data(df):
    # Create a copy of the dataframe to avoid modifying the original
    processed_df = df.copy()
    
    # Handle missing values
    processed_df = processed_df.fillna(0)
    
    # Convert categorical variables to numeric if they exist
    categorical_mappings = {
        'gender': {'male': 0, 'female': 1},
        'time_of_day': {'morning': 0, 'afternoon': 1, 'evening': 2},
    }
    
    for col, mapping in categorical_mappings.items():
        if col in processed_df.columns:
            processed_df[col] = processed_df[col].map(mapping).fillna(0).astype(int)
    
    # Handle date-related features
    date_column = next((col for col in processed_df.columns if 'date' in col.lower()), None)
    if date_column:
        processed_df[date_column] = pd.to_datetime(processed_df[date_column], errors='coerce')
        processed_df['days_since_last_visit'] = (pd.Timestamp.now() - processed_df[date_column]).dt.days
        processed_df['month'] = processed_df[date_column].dt.month
        processed_df['is_ramadan'] = processed_df['month'].isin([9, 10])
        processed_df['is_summer'] = processed_df['month'].isin([6, 7, 8])
    
    # Handle numeric columns
    numeric_columns = processed_df.select_dtypes(include=[np.number]).columns
    for col in numeric_columns:
        processed_df[col] = pd.to_numeric(processed_df[col], errors='coerce').fillna(0)
    
    # Create visit frequency if possible
    if 'id' in processed_df.columns and date_column:
        processed_df['visit_frequency'] = processed_df.groupby('id')[date_column].transform('count')
    
    # Ensure core fields exist, create them if they don't
    core_fields = ['email', 'name', 'churn_risk', 'churn_probability']
    for field in core_fields:
        if field not in processed_df.columns:
            if field in ['churn_risk', 'churn_probability']:
                processed_df[field] = 0  # Default values
            else:
                processed_df[field] = ''  # Empty string for non-numeric fields
    
    return processed_df

================
File: ai\ml\feature_engineering.py
================
import numpy as np

def engineer_features(df):
    df['Contract_length'] = df['Contract_period'].map({1: 'Short', 6: 'Medium', 12: 'Long'})
    df['Time_left_ratio'] = df['Month_to_end_contract'] / df['Contract_period']
    df['Avg_additional_charges_per_month'] = df['Avg_additional_charges_total'] / np.maximum(df['Lifetime'], 1)
    df['Class_frequency_change'] = df['Avg_class_frequency_current_month'] - df['Avg_class_frequency_total']
    df['Is_regular'] = df['Avg_class_frequency_total'] > df['Avg_class_frequency_total'].median()
    
    contract_length_map = {'Short': 0, 'Medium': 1, 'Long': 2}
    df['Contract_length_numeric'] = df['Contract_length'].map(contract_length_map)
    
    df = df.drop(['Contract_length'], axis=1)
    
    return df

def engineer_scenario_features(df, scenario_params):
    df = engineer_features(df)
    
    # Add scenario-specific feature engineering
    if 'new_classes' in scenario_params:
        df['class_variety_score'] = df['class_variety_score'] * (1 + scenario_params['new_classes'] / df['available_classes'])
    
    if 'facility_improvement' in scenario_params:
        df['facility_score'] = df['facility_score'] * (1 + scenario_params['facility_improvement'])
    
    if 'staff_training' in scenario_params:
        df['staff_satisfaction_score'] = df['staff_satisfaction_score'] * (1 + scenario_params['staff_training'])
    
    # Add more scenario-specific feature engineering as needed
    
    return df

================
File: ai\ml\kaggle.py
================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from xgboost import XGBClassifier
from shap import TreeExplainer, summary_plot
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

# Load the data
df = pd.read_csv('gym_churn_us.csv')

# Basic data info
print(df.info())
print("\nMissing values:\n", df.isnull().sum())
print("\nData types:\n", df.dtypes)

# Convert binary columns to boolean
binary_cols = ['gender', 'Near_Location', 'Partner', 'Promo_friends', 'Phone', 'Group_visits', 'Churn']
df[binary_cols] = df[binary_cols].astype(bool)

# EDA
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Distribution of numeric features
numeric_cols = df.select_dtypes(include=[np.number]).columns
fig, axes = plt.subplots(3, 3, figsize=(20, 20))
for i, col in enumerate(numeric_cols):
    sns.histplot(data=df, x=col, hue='Churn', multiple='stack', ax=axes[i//3, i%3])
plt.tight_layout()
plt.show()

# Churn rate by categorical features
cat_cols = ['gender', 'Near_Location', 'Partner', 'Promo_friends', 'Phone', 'Group_visits']
fig, axes = plt.subplots(2, 3, figsize=(20, 12))
for i, col in enumerate(cat_cols):
    sns.barplot(x=col, y='Churn', data=df, ax=axes[i//3, i%3])
plt.tight_layout()
plt.show()

# Feature Engineering
df['Contract_length'] = df['Contract_period'].map({1: 'Short', 6: 'Medium', 12: 'Long'})
df['Time_left_ratio'] = df['Month_to_end_contract'] / df['Contract_period']
df['Avg_additional_charges_per_month'] = df['Avg_additional_charges_total'] / df['Lifetime']
df['Class_frequency_change'] = df['Avg_class_frequency_current_month'] - df['Avg_class_frequency_total']
df['Is_regular'] = df['Avg_class_frequency_total'] > df['Avg_class_frequency_total'].median()

# Prepare data for modeling
X = df.drop(['Churn', 'Contract_length'], axis=1)
y = df['Churn']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model Selection and Training
models = {
    'Random Forest': RandomForestClassifier(random_state=42),
    'XGBoost': XGBClassifier(random_state=42)
}

for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    print(f"\n{name} Results:")
    print(classification_report(y_test, y_pred))
    print("ROC AUC Score:", roc_auc_score(y_test, model.predict_proba(X_test_scaled)[:, 1]))

# Hyperparameter Tuning for the best model (assuming XGBoost performs better)
param_grid = {
    'max_depth': [3, 5, 7],
    'learning_rate': [0.01, 0.1, 0.3],
    'n_estimators': [100, 200, 300],
    'subsample': [0.8, 0.9, 1.0]
}

grid_search = GridSearchCV(XGBClassifier(random_state=42), param_grid, cv=3, scoring='roc_auc', n_jobs=-1)
grid_search.fit(X_train_scaled, y_train)

print("Best parameters:", grid_search.best_params_)
best_model = grid_search.best_estimator_

# Model Interpretation
explainer = TreeExplainer(best_model)
shap_values = explainer.shap_values(X_test_scaled)
summary_plot(shap_values, X_test_scaled, plot_type="bar", feature_names=X.columns)
plt.show()

# Customer Segmentation
kmeans = KMeans(n_clusters=3, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_train_scaled)

# Analyze segments
segment_profile = df.groupby('Cluster').mean()
print("\nSegment Profiles:")
print(segment_profile)

# Churn rate by segment
churn_by_segment = df.groupby('Cluster')['Churn'].mean()
print("\nChurn Rate by Segment:")
print(churn_by_segment)

================
File: ai\ml\model_evaluation.py
================
from sklearn.metrics import classification_report, roc_auc_score, confusion_matrix
import numpy as np

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    y_pred_proba = model.predict_proba(X_test)[:, 1]
    
    report = classification_report(y_test, y_pred, output_dict=True, zero_division=1)
    auc_score = roc_auc_score(y_test, y_pred_proba)
    cm = confusion_matrix(y_test, y_pred)
    
    return {
        'classification_report': report,
        'roc_auc_score': auc_score,
        'confusion_matrix': cm.tolist()
    }

def get_feature_importance(model, feature_names):
    if hasattr(model, 'feature_importances_'):
        importances = model.feature_importances_
    elif hasattr(model, 'coef_'):
        importances = model.coef_[0]
    else:
        return None

    feature_importance = sorted(zip(feature_names, importances), key=lambda x: x[1], reverse=True)
    return feature_importance

================
File: ai\ml\model_training.py
================
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
import joblib
import os
from django.conf import settings
from ..models import InstitutionModel, Institution
import logging

logger = logging.getLogger(__name__)

def train_base_model(X, y):
    model = XGBClassifier(random_state=42)
    model.fit(X, y)
    return model

def fine_tune_model(base_model, X, y):
    fine_tuned_model = joblib.load(joblib.dumps(base_model))
    fine_tuned_model.fit(X, y, xgb_model=fine_tuned_model)
    return fine_tuned_model

def train_models(X, y, institution_id=None):
    try:
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        if institution_id is None:
            model = train_base_model(X_train, y_train)
            model_path = os.path.join(settings.BASE_DIR, 'ai', 'models', 'base_model.joblib')
        else:
            base_model_path = os.path.join(settings.BASE_DIR, 'ai', 'models', 'base_model.joblib')
            base_model = joblib.load(base_model_path)
            model = fine_tune_model(base_model, X_train, y_train)
            model_path = os.path.join(settings.BASE_DIR, 'ai', 'models', f'institution_{institution_id}_model.joblib')

        joblib.dump(model, model_path)

        if institution_id is not None:
            institution = Institution.objects.get(id=institution_id)
            InstitutionModel.objects.update_or_create(
                institution=institution,
                defaults={'model_path': model_path}
            )

        logger.info(f"Model trained and saved for institution {institution_id}")
        return model

    except Exception as e:
        logger.error(f"Error in train_models: {str(e)}")
        return None

def get_model_for_institution(institution_id):
    try:
        institution_model = InstitutionModel.objects.get(institution_id=institution_id)
        return joblib.load(institution_model.model_path)
    except InstitutionModel.DoesNotExist:
        base_model_path = os.path.join(settings.BASE_DIR, 'ai', 'models', 'base_model.joblib')
        return joblib.load(base_model_path)
    except Exception as e:
        logger.error(f"Error in get_model_for_institution: {str(e)}")
        return None

def predict_scenario(model, X_scenario):
    try:
        return model.predict_proba(X_scenario)[:, 1]
    except Exception as e:
        logger.error(f"Error in predict_scenario: {str(e)}")
        return None

================
File: ai\ml\visualization.py
================
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
import math

def get_correlation_heatmap(df):
    plt.figure(figsize=(12, 8))
    sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
    plt.title('Correlation Heatmap')
    
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    image_png = buffer.getvalue()
    buffer.close()
    
    graphic = base64.b64encode(image_png)
    graphic = graphic.decode('utf-8')
    
    return graphic

def get_feature_distributions(df, numeric_cols):
    n_cols = len(numeric_cols)
    n_rows = math.ceil(n_cols / 3)
    fig, axes = plt.subplots(n_rows, 3, figsize=(20, 5*n_rows))
    axes = axes.flatten()  # Flatten the 2D array of axes to 1D for easier indexing
    
    for i, col in enumerate(numeric_cols):
        if i < len(axes):
            sns.histplot(data=df, x=col, hue='Churn', multiple='stack', ax=axes[i])
            axes[i].set_title(col)
    
    # Remove any unused subplots
    for i in range(n_cols, len(axes)):
        fig.delaxes(axes[i])
    
    plt.tight_layout()
    
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    image_png = buffer.getvalue()
    buffer.close()
    
    graphic = base64.b64encode(image_png)
    graphic = graphic.decode('utf-8')
    
    return graphic

def get_churn_by_category(df, cat_cols):
    n_cols = len(cat_cols)
    n_rows = math.ceil(n_cols / 3)
    fig, axes = plt.subplots(n_rows, 3, figsize=(20, 5*n_rows))
    axes = axes.flatten()  # Flatten the 2D array of axes to 1D for easier indexing
    
    for i, col in enumerate(cat_cols):
        if i < len(axes):
            sns.barplot(x=col, y='Churn', data=df, ax=axes[i])
            axes[i].set_title(col)
    
    # Remove any unused subplots
    for i in range(n_cols, len(axes)):
        fig.delaxes(axes[i])
    
    plt.tight_layout()
    
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    image_png = buffer.getvalue()
    buffer.close()
    
    graphic = base64.b64encode(image_png)
    graphic = graphic.decode('utf-8')
    
    return graphic

================
File: ai\models.py
================
from django.db import models
from django.contrib.auth import get_user_model
from accounts.models import Institution, TenantAwareModel
import json

User = get_user_model()

class Member(TenantAwareModel):
    CHURN_RISK_CHOICES = [
        ('low', 'Low Risk'),
        ('medium', 'Medium Risk'),
        ('high', 'High Risk'),
    ]

    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='ai_member', null=True, blank=True)
    institution = models.ForeignKey(Institution, on_delete=models.CASCADE, related_name='ai_members')
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    churn_risk = models.CharField(max_length=10, choices=CHURN_RISK_CHOICES)
    churn_probability = models.FloatField()
    last_prediction_date = models.DateTimeField(auto_now=True)
    gender = models.CharField(max_length=10, null=True, blank=True)
    age = models.IntegerField(null=True, blank=True)
    membership_duration = models.IntegerField(null=True, blank=True)
    visit_frequency = models.FloatField(null=True, blank=True)
    join_date = models.DateField(null=True, blank=True)
    extended_data = models.JSONField(default=dict, blank=True)

    def __str__(self):
        return f"{self.name} - {self.institution.name} - {self.churn_risk} Risk"

class MappingTemplate(TenantAwareModel):
    name = models.CharField(max_length=100)
    mapping = models.JSONField()
    is_default = models.BooleanField(default=False)

    class Meta:
        unique_together = ('name', 'institution')

    def __str__(self):
        return f"{self.name} - {self.institution.name}"

class MemberActivity(TenantAwareModel):
    TIME_CHOICES = [
        ('morning', 'Morning'),
        ('afternoon', 'Afternoon'),
        ('evening', 'Evening'),
    ]
    member = models.ForeignKey(Member, on_delete=models.CASCADE, related_name='activities')
    date = models.DateField()
    class_name = models.CharField(max_length=255)
    time_of_day = models.CharField(max_length=10, choices=TIME_CHOICES)

    def __str__(self):
        return f"{self.member.name} - {self.class_name} on {self.date}"

class ActionableInsight(TenantAwareModel):
    member = models.ForeignKey(Member, on_delete=models.CASCADE, related_name='insights')
    type = models.CharField(max_length=50)
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.type} insight for {self.member.name}"

class ModelMetrics(TenantAwareModel):
    date = models.DateTimeField(auto_now_add=True)
    accuracy = models.FloatField()
    precision = models.FloatField()
    recall = models.FloatField()
    f1_score = models.FloatField()
    auc_roc = models.FloatField()

    def __str__(self):
        return f"Metrics for {self.institution.name} on {self.date}"

class FeatureImportance(TenantAwareModel):
    feature_name = models.CharField(max_length=255)
    importance_score = models.FloatField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.feature_name}: {self.importance_score} for {self.institution.name}"

class MemberSegment(TenantAwareModel):
    name = models.CharField(max_length=255)
    description = models.TextField()

    def __str__(self):
        return f"{self.name} for {self.institution.name}"

class MemberSegmentAssignment(TenantAwareModel):
    member = models.ForeignKey(Member, on_delete=models.CASCADE)
    segment = models.ForeignKey(MemberSegment, on_delete=models.CASCADE)
    assignment_date = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('member', 'segment')

    def __str__(self):
        return f"{self.member.name} - {self.segment.name}"

class InstitutionModel(TenantAwareModel):
    model_path = models.CharField(max_length=255)
    last_trained = models.DateTimeField(auto_now=True)
    performance_metrics = models.JSONField(default=dict)

    def __str__(self):
        return f"AI Model for {self.institution.name}"

    def get_performance_metrics(self):
        return json.loads(self.performance_metrics)

    def set_performance_metrics(self, metrics):
        self.performance_metrics = json.dumps(metrics)



class Campaign(TenantAwareModel):
    name = models.CharField(max_length=255)
    target_segment = models.CharField(max_length=50)
    campaign_type = models.CharField(max_length=50)
    message = models.TextField()
    start_date = models.DateField()
    end_date = models.DateField()
    ai_optimization = models.BooleanField(default=False)
    status = models.CharField(max_length=20, default='Active')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} - {self.institution.name}"

class CampaignPerformance(TenantAwareModel):
    campaign = models.ForeignKey(Campaign, on_delete=models.CASCADE, related_name='performances')
    date = models.DateField()
    total_sent = models.IntegerField()
    open_rate = models.FloatField()
    click_through_rate = models.FloatField()
    conversion_rate = models.FloatField()

    def __str__(self):
        return f"Performance for {self.campaign.name} on {self.date}"

================
File: ai\tests.py
================
# gymwise-backend/ai/tests.py

from django.test import TestCase
from django.urls import reverse
from rest_framework.test import APIClient
from accounts.models import User, Institution
from .models import Member, MemberActivity, ModelMetrics
from django_pgschemas.utils import schema_context
import json

class AIViewsTestCase(TestCase):
    def setUp(self):
        self.client = APIClient()
        self.institution = Institution.objects.create(name="Test Gym", schema_name="test_gym")
        with schema_context(self.institution.schema_name):
            self.user = User.objects.create_user(username="testuser", password="testpass", institution=self.institution)
        self.client.force_authenticate(user=self.user)

    def test_get_member_insights(self):
        with schema_context(self.institution.schema_name):
            Member.objects.create(user=self.user, institution=self.institution, name="Test Member", email="test@example.com")
        response = self.client.get(reverse('member_insights'))
        self.assertEqual(response.status_code, 200)
        self.assertIn('member_info', response.data)

    def test_get_churn_risk_distribution(self):
        response = self.client.get(reverse('churn_risk_distribution'))
        self.assertEqual(response.status_code, 200)

    def test_get_model_performance(self):
        with schema_context(self.institution.schema_name):
            ModelMetrics.objects.create(
                institution=self.institution,
                accuracy=0.9,
                precision=0.8,
                recall=0.7,
                f1_score=0.75,
                auc_roc=0.85
            )
        response = self.client.get(reverse('model_performance'))
        self.assertEqual(response.status_code, 200)
        self.assertIn('accuracy', response.data)

    def test_get_feature_importance(self):
        response = self.client.get(reverse('feature_importance'))
        self.assertEqual(response.status_code, 200)

    def test_get_member_segments(self):
        response = self.client.get(reverse('member_segments'))
        self.assertEqual(response.status_code, 200)

    def test_get_engagement_metrics(self):
        response = self.client.get(reverse('engagement_metrics'))
        self.assertEqual(response.status_code, 200)

    def test_get_retention_forecast(self):
        response = self.client.get(reverse('retention_forecast'))
        self.assertEqual(response.status_code, 200)

    def test_get_seasonal_insights(self):
        response = self.client.get(reverse('seasonal_insights'))
        self.assertEqual(response.status_code, 200)

class AIModelsTestCase(TestCase):
    def setUp(self):
        self.institution = Institution.objects.create(name="Test Gym", schema_name="test_gym")
        with schema_context(self.institution.schema_name):
            self.user = User.objects.create_user(username="testuser", password="testpass", institution=self.institution)

    def test_member_creation(self):
        with schema_context(self.institution.schema_name):
            member = Member.objects.create(user=self.user, institution=self.institution, name="Test Member", email="test@example.com")
            self.assertEqual(Member.objects.count(), 1)
            self.assertEqual(member.name, "Test Member")

    def test_member_activity_creation(self):
        with schema_context(self.institution.schema_name):
            member = Member.objects.create(user=self.user, institution=self.institution, name="Test Member", email="test@example.com")
            activity = MemberActivity.objects.create(member=member, date="2023-01-01", class_name="Test Class", time_of_day="morning")
            self.assertEqual(MemberActivity.objects.count(), 1)
            self.assertEqual(activity.class_name, "Test Class")

================
File: ai\urls.py
================
# gymwise-backend/ai/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('upload-member-data/', views.UploadMemberDataView.as_view(), name='upload_member_data'),
    path('member-insights/', views.get_member_insights, name='member_insights'),
    path('churn-risk-distribution/', views.get_churn_risk_distribution, name='churn_risk_distribution'),
    path('model-performance/', views.get_model_performance, name='model_performance'),
    path('feature-importance/', views.get_feature_importance, name='feature_importance'),
    path('member-segments/', views.get_member_segments, name='member_segments'),
    path('retrain-model/', views.retrain_model, name='retrain_model'),
    path('engagement-metrics/', views.get_engagement_metrics, name='engagement_metrics'),
    path('retention-forecast/', views.get_retention_forecast, name='retention_forecast'),
    path('seasonal-insights/', views.get_seasonal_insights, name='seasonal_insights'),
    path('train-and-evaluate/', views.train_and_evaluate_model, name='train_and_evaluate'),
    path('campaign-suggestions/', views.CampaignSuggestionsView.as_view(), name='campaign_suggestions'),
    path('create-campaign/', views.CreateCampaignView.as_view(), name='create_campaign'),
    path('campaign-performance/', views.CampaignPerformanceView.as_view(), name='campaign_performance'),
    path('active-campaigns/', views.get_active_campaigns, name='active_campaigns'),
    path('campaign-insights/', views.get_campaign_insights, name='campaign_insights'),
    path('what-if-scenario/', views.WhatIfScenarioView.as_view(), name='what_if_scenario'),
    path('data-status/', views.get_data_status, name='data_status'),
    path('analyze-csv/', views.AnalyzeCSVView.as_view(), name='analyze_csv'),
    path('save-mapping-template/', views.SaveMappingTemplateView.as_view(), name='save_mapping_template'),
    path('get-mapping-templates/', views.GetMappingTemplatesView.as_view(), name='get_mapping_templates'),
    path('process-mapped-data/', views.ProcessMappedDataView.as_view(), name='process_mapped_data'),
]

================
File: ai\views.py
================
from django.http import JsonResponse
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAdminUser, IsAuthenticated
from django.db import connection, transaction
from .ml import data_preprocessing, feature_engineering, model_training, model_evaluation, customer_segmentation
from .models import Member, ActionableInsight, ModelMetrics, FeatureImportance, MemberSegment, MemberSegmentAssignment, MemberActivity, InstitutionModel, MappingTemplate
from .insights import generate_insights
from .data_pipeline import get_preprocessed_data_for_institution
from django.db.models import Count
from datetime import datetime, timedelta
from accounts.permissions import IsSuperAdminOrAdmin
import pandas as pd
import numpy as np
import joblib
import os
from django.conf import settings
import logging
from .models import Campaign, CampaignPerformance
from rest_framework import status
from django.db.models import Sum, Avg
import json

logger = logging.getLogger(__name__)

class UploadMemberDataView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, format=None):
        try:
            institution = request.user.institution
            if not institution:
                return Response({'error': 'User is not associated with an institution'}, status=400)

            file = request.FILES.get('file')
            if not file:
                return Response({'error': 'No file uploaded'}, status=400)
            
            df = pd.read_csv(file)
            
            # Preprocess data
            try:
                df = data_preprocessing.preprocess_data(df)
                df = feature_engineering.engineer_features(df)
            except Exception as e:
                logger.error(f"Error in data preprocessing or feature engineering: {str(e)}")
                return Response({'error': f'Error processing data: {str(e)}'}, status=400)
            
            # Check if required columns are present
            required_columns = ['email', 'name']
            missing_columns = [col for col in required_columns if col not in df.columns]
            if missing_columns:
                return Response({'error': f'Missing required columns: {", ".join(missing_columns)}'}, status=400)
            
            X = df.drop(['Churn', 'name', 'email'], axis=1)
            y = df['Churn']
            
            # Train or fine-tune model for the specific institution
            model = model_training.train_models(X, y, institution.id)
            
            # Make predictions
            probabilities = model.predict_proba(X)[:, 1]
            
            df['churn_probability'] = probabilities
            df['churn_risk'] = pd.cut(df['churn_probability'], 
                                      bins=[0, 0.3, 0.7, 1], 
                                      labels=['low', 'medium', 'high'])
            
            # Update or create Member objects
            for _, row in df.iterrows():
                member, created = Member.objects.update_or_create(
                    email=row['email'],
                    institution=institution,
                    defaults={
                        'name': row['name'],
                        'churn_risk': row['churn_risk'],
                        'churn_probability': row['churn_probability'],
                        # Add other fields as necessary
                    }
                )
                
                # Generate insights
                historical_data = MemberActivity.objects.filter(member=member)
                insights = generate_insights(member, historical_data)
                for insight in insights:
                    ActionableInsight.objects.create(
                        member=member, 
                        type=insight['type'],
                        message=insight['message'],
                        institution=institution
                    )
            
            return Response({'message': 'Data processed successfully'})
        
        except Exception as e:
            logger.error(f"Error in UploadMemberDataView: {str(e)}", exc_info=True)
            return Response({'error': str(e)}, status=500)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_member_insights(request):
    try:
        member = Member.objects.get(user=request.user, institution=request.user.institution)
        historical_data = MemberActivity.objects.filter(member=member)
        insights = generate_insights(member, historical_data)
        actionable_insights = ActionableInsight.objects.filter(member=member, institution=request.user.institution).order_by('-created_at')
        
        response_data = {
            'member_info': {
                'name': member.name,
                'churn_risk': member.churn_risk,
                'churn_probability': member.churn_probability,
            },
            'insights': insights,
            'actionable_insights': [
                {
                    'type': insight.type,
                    'message': insight.message,
                    'created_at': insight.created_at
                } for insight in actionable_insights
            ]
        }
        
        return Response(response_data)
    except Member.DoesNotExist:
        return Response({'error': 'Member not found'}, status=404)
    except Exception as e:
        logger.error(f"Error in get_member_insights: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while fetching member insights'}, status=500)


@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_churn_risk_distribution(request):
    try:
        distribution = Member.objects.filter(institution=request.user.institution).values('churn_risk').annotate(count=Count('churn_risk'))
        return Response(distribution)
    except Exception as e:
        logger.error(f"Error in get_churn_risk_distribution: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while fetching churn risk distribution'}, status=500)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_model_performance(request):
    try:
        latest_metrics = ModelMetrics.objects.filter(institution=request.user.institution).latest('date')
        performance_data = {
            'accuracy': latest_metrics.accuracy,
            'precision': latest_metrics.precision,
            'recall': latest_metrics.recall,
            'f1_score': latest_metrics.f1_score,
            'auc_roc': latest_metrics.auc_roc,
            'date': latest_metrics.date
        }
        return Response(performance_data)
    except ModelMetrics.DoesNotExist:
        return Response({'error': 'No model performance data available'}, status=404)
    except Exception as e:
        logger.error(f"Error in get_model_performance: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while fetching model performance'}, status=500)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_feature_importance(request):
    try:
        feature_importance = FeatureImportance.objects.filter(institution=request.user.institution).order_by('-importance_score')[:10]
        data = [{'feature': fi.feature_name, 'importance': fi.importance_score} for fi in feature_importance]
        return Response(data)
    except Exception as e:
        logger.error(f"Error in get_feature_importance: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while fetching feature importance'}, status=500)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_member_segments(request):
    try:
        segments = MemberSegment.objects.filter(institution=request.user.institution).annotate(member_count=Count('membersegmentassignment'))
        data = [{'segment': segment.name, 'count': segment.member_count} for segment in segments]
        return Response(data)
    except Exception as e:
        logger.error(f"Error in get_member_segments: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while fetching member segments'}, status=500)

@api_view(['POST'])
@permission_classes([IsAdminUser])
def retrain_model(request):
    try:
        # Load and preprocess data for the specific institution
        df = get_preprocessed_data_for_institution(request.user.institution.id)
        
        X = df.drop('churn_probability', axis=1)
        y = df['churn_probability'].apply(lambda x: 1 if x > 0.5 else 0)  # Convert to binary

        # Retrain the model
        model = model_training.train_models(X, y, request.user.institution.id)
        
        # Evaluate the new model
        results = model_evaluation.evaluate_model(model, X, y)
        
        # Save the model metrics
        ModelMetrics.objects.create(
            institution=request.user.institution,
            accuracy=results['accuracy'],
            precision=results['precision'],
            recall=results['recall'],
            f1_score=results['f1_score'],
            auc_roc=results['auc_roc']
        )
        
        return Response({'message': 'Model retrained successfully', 'performance': results})
    except Exception as e:
        logger.error(f"Error in retrain_model: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while retraining the model'}, status=500)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_engagement_metrics(request):
    try:
        total_members = Member.objects.filter(institution=request.user.institution).count()
        active_members = Member.objects.filter(institution=request.user.institution, visit_frequency__gt=2).count()
        engagement_rate = active_members / total_members if total_members > 0 else 0
        
        metrics = {
            'total_members': total_members,
            'active_members': active_members,
            'engagement_rate': engagement_rate
        }
        return Response(metrics)
    except Exception as e:
        logger.error(f"Error in get_engagement_metrics: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while fetching engagement metrics'}, status=500)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_retention_forecast(request):
    try:
        total_members = Member.objects.filter(institution=request.user.institution).count()
        at_risk_members = Member.objects.filter(institution=request.user.institution, churn_risk='high').count()
        forecast_retention_rate = 1 - (at_risk_members / total_members) if total_members > 0 else 0
        
        forecast = {
            'current_members': total_members,
            'at_risk_members': at_risk_members,
            'forecast_retention_rate': forecast_retention_rate
        }
        return Response(forecast)
    except Exception as e:
        logger.error(f"Error in get_retention_forecast: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while generating retention forecast'}, status=500)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_seasonal_insights(request):
    try:
        current_month = datetime.now().month
        
        if 5 <= current_month <= 8:  # Summer months
            insight = "Summer season: Focus on outdoor activities and hydration reminders."
        elif current_month == 9:  # Ramadan (approximate)
            insight = "Ramadan: Adjust class schedules and offer nutrition advice for fasting members."
        else:
            insight = "Regular season: Maintain standard engagement strategies."
        
        return Response({'seasonal_insight': insight})
    except Exception as e:
        logger.error(f"Error in get_seasonal_insights: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while generating seasonal insights'}, status=500)

@api_view(['POST'])
@permission_classes([IsAdminUser])
def train_and_evaluate_model(request):
    try:
        institution = request.user.institution
        logger.info(f"Starting model training and evaluation for {institution.name}")
        
        # Load data for the specific institution
        df = get_preprocessed_data_for_institution(institution.id)
        logger.info("Data loaded and preprocessed")
        
        X = df.drop('churn_probability', axis=1)
        y = df['churn_probability'].apply(lambda x: 1 if x > 0.5 else 0)  # Convert to binary
        
        # Train model for the specific institution
        model = model_training.train_models(X, y, institution.id)
        logger.info("Model trained")
        
        # Evaluate model
        results = model_evaluation.evaluate_model(model, X, y)
        logger.info("Model evaluated")
        
        # Save model metrics
        ModelMetrics.objects.create(
            institution=institution,
            accuracy=results['accuracy'],
            precision=results['precision'],
            recall=results['recall'],
            f1_score=results['f1_score'],
            auc_roc=results['auc_roc']
        )
        
        # Save or update InstitutionModel
        model_path = f'models/institution_{institution.id}_model.joblib'
        joblib.dump(model, model_path)
        InstitutionModel.objects.update_or_create(
            institution=institution,
            defaults={
                'model_path': model_path,
                'performance_metrics': results
            }
        )
        
        return JsonResponse({
            'message': 'Model trained and evaluated successfully',
            'results': results
        })
    except Exception as e:
        logger.error(f"Error in train_and_evaluate_model: {str(e)}", exc_info=True)
        return JsonResponse({'error': str(e)}, status=500)
    




class CampaignSuggestionsView(APIView):
    permission_classes = [IsAdminUser]

    def get(self, request):
        try:
            institution_id = request.user.institution.id
            
            # Load member data
            members = Member.objects.filter(institution_id=institution_id).values()
            df = pd.DataFrame.from_records(members)
            
            # Preprocess data
            df = data_preprocessing.preprocess_data(df)
            df = feature_engineering.engineer_features(df)
            
            # Get model
            model = model_training.get_model_for_institution(institution_id)
            
            if model is None:
                return Response({"error": "Model not found for this institution"}, status=status.HTTP_404_NOT_FOUND)
            
            # Predict churn probabilities
            X = df.drop(['id', 'name', 'email', 'churn_probability'], axis=1, errors='ignore')
            churn_probabilities = model.predict_proba(X)[:, 1]
            
            # Segment members based on churn risk
            df['churn_risk'] = pd.cut(churn_probabilities, bins=[0, 0.3, 0.7, 1], labels=['Low', 'Medium', 'High'])
            
            # Generate campaign suggestions
            suggestions = self.generate_campaign_suggestions(df)
            
            return Response(suggestions, status=status.HTTP_200_OK)
        
        except Exception as e:
            logger.error(f"Error in CampaignSuggestionsView: {str(e)}")
            return Response({"error": "An error occurred while generating campaign suggestions"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def generate_campaign_suggestions(self, df):
        suggestions = []
        
        # High-risk members campaign
        high_risk_count = df[df['churn_risk'] == 'High'].shape[0]
        if high_risk_count > 0:
            suggestions.append({
                "target_segment": "High Churn Risk",
                "member_count": high_risk_count,
                "campaign_type": "Personalized Retention",
                "message_template": "We've missed you at the gym! Here's a special offer to get you back on track: {offer}",
                "recommended_actions": ["Offer a free personal training session", "Provide a discount on membership renewal"]
            })
        
        # Low-engagement members campaign
        low_engagement_count = df[df['visit_frequency'] < df['visit_frequency'].median()].shape[0]
        if low_engagement_count > 0:
            suggestions.append({
                "target_segment": "Low Engagement",
                "member_count": low_engagement_count,
                "campaign_type": "Re-engagement",
                "message_template": "Boost your fitness journey with our new {class_type} class! Join us this week and feel the difference.",
                "recommended_actions": ["Introduce new class types", "Send workout tips and motivation"]
            })
        
        # Expiring membership campaign
        expiring_soon_count = df[df['days_to_membership_expiry'] <= 30].shape[0]
        if expiring_soon_count > 0:
            suggestions.append({
                "target_segment": "Expiring Memberships",
                "member_count": expiring_soon_count,
                "campaign_type": "Renewal",
                "message_template": "Your membership is expiring soon. Renew now and get {discount}% off your next month!",
                "recommended_actions": ["Offer renewal incentives", "Highlight new gym features or classes"]
            })
        
        return suggestions

class CreateCampaignView(APIView):
    permission_classes = [IsAdminUser]

    def post(self, request):
        try:
            campaign_data = request.data
            campaign_data['institution'] = request.user.institution
            
            campaign = Campaign.objects.create(**campaign_data)
            
            return Response({"message": "Campaign created successfully", "id": campaign.id}, status=status.HTTP_201_CREATED)
        
        except Exception as e:
            logger.error(f"Error in CreateCampaignView: {str(e)}")
            return Response({"error": "An error occurred while creating the campaign"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class CampaignPerformanceView(APIView):
    permission_classes = [IsAdminUser]

    def get(self, request):
        try:
            institution_id = request.user.institution.id
            campaigns = Campaign.objects.filter(institution_id=institution_id)
            
            performance_data = []
            for campaign in campaigns:
                performance = CampaignPerformance.objects.filter(campaign=campaign).aggregate(
                    avg_open_rate=Avg('open_rate'),
                    avg_click_rate=Avg('click_through_rate'),
                    avg_conversion_rate=Avg('conversion_rate')
                )
                
                performance_data.append({
                    "id": campaign.id,
                    "name": campaign.name,
                    "target_segment": campaign.target_segment,
                    "campaign_type": campaign.campaign_type,
                    "start_date": campaign.start_date,
                    "end_date": campaign.end_date,
                    "status": campaign.status,
                    "avg_open_rate": performance['avg_open_rate'],
                    "avg_click_rate": performance['avg_click_rate'],
                    "avg_conversion_rate": performance['avg_conversion_rate']
                })
            
            return Response(performance_data, status=status.HTTP_200_OK)
        
        except Exception as e:
            logger.error(f"Error in CampaignPerformanceView: {str(e)}")
            return Response({"error": "An error occurred while fetching campaign performance"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_active_campaigns(request):
    try:
        campaigns = Campaign.objects.filter(institution=request.user.institution, status='Active')
        data = [{
            'id': campaign.id,
            'name': campaign.name,
            'targetSegment': campaign.target_segment,
            'campaignType': campaign.campaign_type,
            'status': campaign.status,
            'startDate': campaign.start_date,
            'endDate': campaign.end_date,
        } for campaign in campaigns]
        return Response(data)
    except Exception as e:
        logger.error(f"Error in get_active_campaigns: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while fetching active campaigns'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_campaign_insights(request):
    try:
        total_campaigns = Campaign.objects.filter(institution=request.user.institution).count()
        active_campaigns = Campaign.objects.filter(institution=request.user.institution, status='Active').count()
        
        total_sent = CampaignPerformance.objects.filter(campaign__institution=request.user.institution).aggregate(Sum('total_sent'))['total_sent__sum'] or 0
        avg_open_rate = CampaignPerformance.objects.filter(campaign__institution=request.user.institution).aggregate(Avg('open_rate'))['open_rate__avg'] or 0
        avg_ctr = CampaignPerformance.objects.filter(campaign__institution=request.user.institution).aggregate(Avg('click_through_rate'))['click_through_rate__avg'] or 0
        avg_conversion_rate = CampaignPerformance.objects.filter(campaign__institution=request.user.institution).aggregate(Avg('conversion_rate'))['conversion_rate__avg'] or 0

        insights = [
            {'label': 'Total Campaigns', 'value': str(total_campaigns), 'change': 0},
            {'label': 'Active Campaigns', 'value': str(active_campaigns), 'change': 0},
            {'label': 'Total Sent', 'value': str(total_sent), 'change': 0},
            {'label': 'Avg. Open Rate', 'value': f"{avg_open_rate:.2f}%", 'change': 0},
            {'label': 'Avg. Click-through Rate', 'value': f"{avg_ctr:.2f}%", 'change': 0},
            {'label': 'Avg. Conversion Rate', 'value': f"{avg_conversion_rate:.2f}%", 'change': 0},
        ]
        return Response(insights)
    except Exception as e:
        logger.error(f"Error in get_campaign_insights: {str(e)}", exc_info=True)
        return Response({'error': 'An error occurred while fetching campaign insights'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        

class WhatIfScenarioView(APIView):
    def post(self, request):
        try:
            institution_id = request.user.institution.id
            scenario_params = request.data.get('scenario_params', {})

            # Input validation
            if not self.validate_scenario_params(scenario_params):
                return Response({"error": "Invalid scenario parameters"}, status=status.HTTP_400_BAD_REQUEST)

            # Check cache for existing scenario results
            cache_key = f"scenario_{institution_id}_{hash(frozenset(scenario_params.items()))}"
            cached_result = cache.get(cache_key)
            if cached_result:
                return Response(cached_result, status=status.HTTP_200_OK)

            # Load current member data
            members = Member.objects.filter(institution_id=institution_id).values()
            df = pd.DataFrame.from_records(members)

            # Preprocess and engineer features for the scenario
            df = data_preprocessing.preprocess_scenario_data(df, scenario_params)
            df = feature_engineering.engineer_scenario_features(df, scenario_params)

            # Get the model for this institution
            model = model_training.get_model_for_institution(institution_id)

            if model is None:
                return Response({"error": "Model not found for this institution"}, status=status.HTTP_404_NOT_FOUND)

            # Make predictions
            X_scenario = df.drop(['id', 'name', 'email', 'churn_probability'], axis=1, errors='ignore')
            scenario_probabilities = model_training.predict_scenario(model, X_scenario)

            if scenario_probabilities is None:
                return Response({"error": "Error in scenario prediction"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

            # Calculate retention rate
            current_retention_rate = 1 - df['churn_probability'].mean()
            scenario_retention_rate = 1 - scenario_probabilities.mean()

            response_data = {
                "current_retention_rate": current_retention_rate,
                "scenario_retention_rate": scenario_retention_rate,
                "retention_rate_change": scenario_retention_rate - current_retention_rate,
            }

            # Cache the result
            cache.set(cache_key, response_data, timeout=3600)  # Cache for 1 hour

            return Response(response_data, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Error in WhatIfScenarioView: {str(e)}")
            return Response({"error": "An error occurred while processing the scenario"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def validate_scenario_params(self, params):
        valid_params = {
            'membership_price_change': (-0.5, 0.5),
            'new_classes': (0, 10),
            'gym_hours_change': (-4, 4),
            'marketing_intensity': (0.5, 2),
            'facility_improvement': (0, 0.5),
            'staff_training': (0, 0.5)
        }

        for param, (min_val, max_val) in valid_params.items():
            if param in params:
                if not isinstance(params[param], (int, float)) or params[param] < min_val or params[param] > max_val:
                    return False
        return True

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_data_status(request):
    institution = request.user.institution
    total_records = Member.objects.filter(institution=institution).count()
    processed_records = MemberActivity.objects.filter(member__institution=institution).values('member').distinct().count()
    
    latest_metrics = ModelMetrics.objects.filter(institution=institution).order_by('-date').first()
    data_quality = latest_metrics.accuracy * 100 if latest_metrics else 0
    
    last_update = MemberActivity.objects.filter(member__institution=institution).order_by('-date').first()
    last_update_time = last_update.date if last_update else None

    return Response({
        'lastUpdate': last_update_time,
        'totalRecords': total_records,
        'processedRecords': processed_records,
        'dataQuality': data_quality
    })

class AnalyzeCSVView(APIView):
    permission_classes = [IsAuthenticated, IsSuperAdminOrAdmin]

    def post(self, request):
        file = request.FILES.get('file')
        if not file:
            return Response({'error': 'No file uploaded'}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            df = pd.read_csv(file)
            columns = df.columns.tolist()
            return Response({'columns': columns})
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

class SaveMappingTemplateView(APIView):
    permission_classes = [IsAuthenticated, IsSuperAdminOrAdmin]

    def post(self, request):
        name = request.data.get('name')
        mapping = request.data.get('mapping')
        is_default = request.data.get('is_default', False)
        
        if not name or not mapping:
            return Response({'error': 'Name and mapping are required'}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            template, created = MappingTemplate.objects.update_or_create(
                name=name,
                institution=request.user.institution,
                defaults={
                    'mapping': mapping,
                    'is_default': is_default
                }
            )
            return Response({
                'id': template.id,
                'name': template.name,
                'is_default': template.is_default
            }, status=status.HTTP_201_CREATED if created else status.HTTP_200_OK)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

class GetMappingTemplatesView(APIView):
    permission_classes = [IsAuthenticated, IsSuperAdminOrAdmin]

    def get(self, request):
        templates = MappingTemplate.objects.filter(institution=request.user.institution)
        data = [{
            'id': t.id,
            'name': t.name,
            'is_default': t.is_default,
            'mapping': t.mapping
        } for t in templates]
        return Response(data)


class ProcessMappedDataView(APIView):
    permission_classes = [IsAuthenticated, IsSuperAdminOrAdmin]

    def post(self, request):
        file = request.FILES.get('file')
        mapping = request.data.get('mapping')
        
        if not file or not mapping:
            return Response({'error': 'File and mapping are required'}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            df = pd.read_csv(file)
            
            # Convert mapping from JSON string to dictionary if necessary
            if isinstance(mapping, str):
                mapping = json.loads(mapping)
            
            # Create a reverse mapping
            reverse_mapping = {v: k for k, v in mapping.items()}
            
            # Rename columns based on the mapping
            df_mapped = df.rename(columns=reverse_mapping)
            
            # Preprocess data
            df_processed = data_preprocessing.preprocess_data(df_mapped)
            df_processed = feature_engineering.engineer_features(df_processed)
            
            # Train or update the model
            model = model_training.train_models(df_processed, request.user.institution.id)
            
            with transaction.atomic():
                for _, row in df_processed.iterrows():
                    core_data = {
                        'email': row['email'],
                        'name': row['name'],
                        'churn_risk': row['churn_risk'],
                        'churn_probability': row['churn_probability']
                    }
                    extended_data = {col: row[col] for col in df_processed.columns if col not in core_data}
                    
                    Member.objects.update_or_create(
                        email=core_data['email'],
                        institution=request.user.institution,
                        defaults={
                            **core_data,
                            'extended_data': extended_data
                        }
                    )
            
            return Response({'message': 'Data processed successfully'})
        except Exception as e:
            return Response({'error': f"An error occurred: {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)

================
File: bookings\admin.py
================
from django.contrib import admin
from .models import Booking

@admin.register(Booking)
class BookingAdmin(admin.ModelAdmin):
    list_display = ('name', 'email', 'phone', 'preferred_date', 'created_at')
    search_fields = ('name', 'email', 'phone')
    list_filter = ('preferred_date', 'created_at')

================
File: bookings\apps.py
================
from django.apps import AppConfig


class BookingsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "bookings"

================
File: bookings\migrations\0001_initial.py
================
# Generated by Django 5.0.7 on 2024-07-29 12:20

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=20)),
                ("preferred_date", models.DateField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]

================
File: bookings\models.py
================
from django.db import models

class Booking(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    phone = models.CharField(max_length=20)
    preferred_date = models.DateField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

================
File: bookings\serializers.py
================
from rest_framework import serializers
from .models import Booking

class BookingSerializer(serializers.ModelSerializer):
    class Meta:
        model = Booking
        fields = '__all__'

================
File: bookings\templates\confirmation_email_template.html
================
<!DOCTYPE html>
<html>
<body>
    <h2>Thank you for contacting GymWise</h2>
    <p>Dear {{ name }},</p>
    <p>We have received your message and will get back to you as soon as possible.</p>
    <p>Best regards,<br>The GymWise Team</p>
</body>
</html>

================
File: bookings\templates\contact_email_template.html
================
<!DOCTYPE html>
<html>
<body>
    <h2>New Contact Form Submission</h2>
    <p><strong>Name:</strong> {{ name }}</p>
    <p><strong>Email:</strong> {{ email }}</p>
    <p><strong>Message:</strong></p>
    <p>{{ message }}</p>
</body>
</html>

================
File: bookings\tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: bookings\urls.py
================
from django.urls import path, include
from .views import book_demo, get_bookings, ContactFormView

urlpatterns = [
    path('book-demo/', book_demo, name='book-demo'),
    path('bookings/', get_bookings, name='get-bookings'),
    path('contact/', ContactFormView.as_view(), name='contact_form'),
]

================
File: bookings\views.py
================
from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view
from .models import Booking
from .serializers import BookingSerializer
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.core.mail import send_mail
from django.conf import settings

@api_view(['POST'])
def book_demo(request):
    if request.method == 'POST':
        serializer = BookingSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
@api_view(['GET'])
def get_bookings(request):
    bookings = Booking.objects.all()
    serializer = BookingSerializer(bookings, many=True)
    return Response(serializer.data)

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.core.mail import send_mail
from django.conf import settings
from django.template.loader import render_to_string
from django.utils.html import strip_tags

class ContactFormView(APIView):
    def post(self, request):
        name = request.data.get('name')
        email = request.data.get('email')
        message = request.data.get('message')
        
        if not all([name, email, message]):
            return Response({"error": "All fields are required"}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            # Prepare email content
            subject = f"New contact form submission from {name}"
            html_message = render_to_string('contact_email_template.html', {
                'name': name,
                'email': email,
                'message': message
            })
            plain_message = strip_tags(html_message)
            
            # Send email
            send_mail(
                subject,
                plain_message,
                'contact@gymwise.tech',
                ['contact@gymwise.tech'],
                html_message=html_message,
                fail_silently=False,
            )
            
            # Send confirmation email to the user
            confirmation_subject = "We've received your message - GymWise"
            confirmation_html = render_to_string('confirmation_email_template.html', {
                'name': name
            })
            confirmation_plain = strip_tags(confirmation_html)
            
            send_mail(
                confirmation_subject,
                confirmation_plain,
                'contact@gymwise.tech',
                [email],
                html_message=confirmation_html,
                fail_silently=False,
            )
            
            return Response({"message": "Your message has been sent successfully"}, status=status.HTTP_200_OK)
        
        except Exception as e:
            # Log the error (you should set up proper logging)
            print(f"Error sending email: {str(e)}")
            return Response({"error": "An error occurred while sending your message. Please try again later."}, 
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

================
File: gymwise_api\asgi.py
================
"""
ASGI config for gymwise_api project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "gymwise_api.settings")

application = get_asgi_application()

================
File: gymwise_api\middleware.py
================
# gymwise-backend/gymwise_api/middleware.py

import logging
from django.http import JsonResponse

logger = logging.getLogger(__name__)

class ErrorHandlingMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        return response

    def process_exception(self, request, exception):
        logger.exception(f"Unhandled exception: {str(exception)}")
        return JsonResponse({
            'error': 'An unexpected error occurred',
            'details': str(exception)
        }, status=500)

================
File: gymwise_api\settings.py
================
from pathlib import Path
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = "django-insecure-p0y#b8xbi4@t2^skqw2!x+xszn*cg$qvjf=rgb+_vf3@juk!8k"
DEBUG = True
ALLOWED_HOSTS = ['*']  # In production, replace with your actual domain names

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'accounts',
    'bookings',
    'ai',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

MAIN_DOMAIN = '127.0.0.1'  # Replace with your actual main domain

ROOT_URLCONF = 'gymwise_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gymwise_api.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'dbGymwise44', 
        'USER': 'postgres',
        'PASSWORD': 'naserww13',
        'HOST': '127.0.0.1', 
        'PORT': '5432',
    }
}

AUTH_USER_MODEL = 'accounts.User'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

CORS_ALLOW_ALL_ORIGINS = True  # In production, replace with specific origins
CORS_ALLOW_CREDENTIALS = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'live.smtp.mailtrap.io'
EMAIL_PORT = '587'
EMAIL_HOST_USER = 'api'
EMAIL_HOST_PASSWORD = '12cf0721b9cfeca68f14ab7020252049'
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

CONTACT_EMAIL = 'contact@gymwise.tech'

================
File: gymwise_api\urls.py
================
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('accounts.urls')),
    path('api/', include('bookings.urls')),
    path('ai/', include('ai.urls')),
]

================
File: gymwise_api\wsgi.py
================
"""
WSGI config for gymwise_api project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "gymwise_api.settings")

application = get_wsgi_application()

================
File: manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "gymwise_api.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()

================
File: requirements.txt
================
asgiref==3.8.1
Django==5.0.7
django-cors-headers==4.4.0
djangorestframework==3.15.2
djangorestframework-simplejwt==5.3.1
pillow==10.4.0
psycopg2-binary==2.9.9
PyJWT==2.8.0
sqlparse==0.5.1
tzdata==2024.1
